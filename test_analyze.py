# Boost Software License - Version 1.0 - August 17th, 2003
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import analyze

import clang

import pytest
from mock import MagicMock, patch


def test_analyzing_empty_translation_unit(translation_unit, analyzer):
    analyze.analyze_translation_unit(MagicMock(), translation_unit)
    assert analyzer.call_count == 0


def test_analyzing_one_namespace(translation_unit, analyzer):
    translation_unit.cursor.new_namespace('Foo')
    analyze.analyze_translation_unit(MagicMock(), translation_unit)
    assert analyzer.call_count == 1


def test_analyzing_sequential_namespaces(analyze_nodes_tester):
    analyze_nodes_tester.with_namespace('Foo').with_namespace('Bar').test()
    assert analyze_nodes_tester.analyzer.call_count == 2


def test_analyzing_nested_namespaces(analyze_nodes_tester):
    analyze_nodes_tester.root.new_namespace('Foo').new_namespace('Bar')
    analyze_nodes_tester.test()
    assert analyze_nodes_tester.analyzer.call_count == 2


def test_camel_case_analysis_succeeds(output, node):
    with patch('analyze.is_camel_case') as analyzer:
        analyzer.return_value = True
        analyze.analyse_camel_case(output, node)
    assert 0 == output.rule_violation.call_count


def test_camel_case_analysis_fails(output, node):
    with patch('analyze.is_camel_case') as analyzer:
        analyzer.return_value = False
        analyze.analyse_camel_case(output, node)
    output.rule_violation.assert_called_once_with(
        node.location, 'namespace', node.spelling, 'is not in CamelCase')


def test_recognizing_camel_case_with_one_part():
    assert analyze.is_camel_case('Foo')


def test_recognizing_camel_case_with_multiple_parts():
    assert analyze.is_camel_case('FooBar')


def test_recognizing_camel_case_with_number_at_end():
    assert analyze.is_camel_case('Foo1234Bar')


def test_recognizing_camel_case_with_number_at_end_of_part():
    assert analyze.is_camel_case('Foo1234Bar')


def test_recognizing_camel_case_error_when_all_lowercase():
    assert not analyze.is_camel_case('foo')


def test_recognizing_camel_case_error_when_starts_with_lowercase():
    assert not analyze.is_camel_case('fooBar')


def test_recognizing_camel_case_error_when_snake_case():
    assert not analyze.is_camel_case('foo_bar')


def test_recognizing_camel_case_error_when_capitalized_snake_case():
    assert not analyze.is_camel_case('Foo_Bar')


def test_recognizing_camel_case_error_when_too_many_uppercase():
    assert not analyze.is_camel_case('MMHeight')


def test_recognizing_camel_case_error_with_number_at_middle_of_part():
    assert not analyze.is_camel_case('Fo1234oBar')


@pytest.fixture
def analyzer(request):
    result = patch('analyze.analyse_camel_case', autospec=True)
    request.addfinalizer(patch.stopall)
    return result.start()


@pytest.fixture
def translation_unit():
    result = MagicMock
    result.cursor = _Node('name')
    return result


@pytest.fixture
def node():
    return _Node('name')


@pytest.fixture
def analyze_nodes_tester(request):
    result = _NodeAnalyzeTester()
    request.addfinalizer(patch.stopall)
    return result


@pytest.fixture
def output():
    return MagicMock()


class _NodeAnalyzeTester:
    def __init__(self):
        self.root = _Node('root')
        self.analyzer = self._add_patch('analyze.analyse_camel_case')
        self.output = MagicMock()

    def test(self):
        analyze.analyze_nodes(self.output, self.root)

    def with_namespace(self, name):
        self.root.new_namespace(name)
        return self

    def _add_patch(self, name):
        patcher = patch(name, autospec=True)
        return patcher.start()


class _Node:
    def __init__(self, name):
        self.children = []
        self.cursor = MagicMock()
        self.cursor.get_children.return_value = iter(self.children)
        self.spelling = name
        self.location = MagicMock()

    @staticmethod
    def create_namespace(name):
        return _Node.create_declaration(
            clang.cindex.CursorKind.NAMESPACE, name)

    @staticmethod
    def create_declaration(cursor_kind, name):
        declaration = _Node(name)
        declaration.kind = cursor_kind
        return declaration

    def get_children(self):
        return iter(self.children)

    def new_namespace(self, name):
        return self._add_child(_Node.create_namespace, name)

    def _add_child(self, creator, *args):
        child = creator(args)
        self.children.append(child)
        return child
