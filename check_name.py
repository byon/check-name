# Boost Software License - Version 1.0 - August 17th, 2003
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.


import analyze
import report

import argparse
import sys
import clang.cindex


def main(arguments):
    output = report.Output()
    try:
        return do_analyzis(parse_options_from_arguments(arguments), output)
    except clang.cindex.TranslationUnitLoadError as e:
        output.error(str(e))
        return 1


def do_analyzis(all_options, output):
    options, clang_options = all_options
    clang.cindex.conf.set_library_path(options.llvm_path)

    index = clang.cindex.Index.create()
    translation_unit = index.parse(options.target, clang_options)

    report_diagnostics(output, translation_unit.diagnostics)

    analyze.analyze_translation_unit(output, translation_unit)
    if output.has_errors:
        return 1
    return 0


def parse_options_from_arguments(arguments):
    parser = create_argument_parser()
    parser.add_argument('-l', '--llvm_path', required=True,
                        help='path directory that contains llvm library')
    parser.add_argument('-t', '--target', required=True,
                        help='path to file to be analyzed')
    return parser.parse_known_args(arguments[1:])


def create_argument_parser():
    description = 'C++ naming style checker (for hard-coded style)'
    epilog = ('Also any unknown options and arguments will be passed to ' +
              'libclang. The purpose is to allow passing of compiler ' +
              'options transparently.' +
              'Please check clang documentation for more information.')
    return argparse.ArgumentParser(description=description,
                                   epilog=epilog)


def report_diagnostics(output, diagnostics):
    for d in diagnostics:
        output.diagnostic(d.severity, d.location, d.spelling)


if __name__ == '__main__':
    sys.exit(main(sys.argv))
