# Boost Software License - Version 1.0 - August 17th, 2003
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.


from __future__ import print_function
import sys
import clang


class Output:

    def __init__(self):
        self.error_count = 0

    def rule_violation(self, location, type, symbol, reason):
        output = '{} {} "{}" {}'.format(_header(location, 'error'), type,
                                        symbol, reason)
        self.error(output)

    def diagnostic(self, severity, location, reason):
        self._output(_header(location, _severity_to_string(severity)) + ' ' +
                     reason)
        if severity > clang.cindex.Diagnostic.Warning:
            self.error_count += 1

    def error(self, output):
        self._output(output)
        self.error_count += 1

    def _output(self, output):
        print(output, file=sys.stderr)

    @property
    def has_errors(self):
        return self.error_count > 0


def _header(location, severity):
    return '{}: {}:'.format(_location_to_string(location), severity)


def _location_to_string(location):
    return (str(location.file) + ' (' +
            str(location.line) + ', ' +
            str(location.column) + ')')


def _severity_to_string(severity):
    to_string = {0: 'ignored',
                 1: 'note',
                 2: 'warning',
                 3: 'error',
                 4: 'fatal'}
    return to_string[severity]
