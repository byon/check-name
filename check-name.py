#!/usr/bin/python2
# Boost Software License - Version 1.0 - August 17th, 2003
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import sys
import clang.cindex


def main():
    clang.cindex.conf.set_library_path('/home/byon/src/vendor/' +
                                       'llvm/build/Release/lib')
    index = clang.cindex.Index.create()
    tu = index.parse(sys.argv[1], sys.argv[2:])
    print '<top>'
    print('<TranslationUnit>' + tu.spelling + '</TranslationUnit>')
    for d in tu.diagnostics:
        print '<diagnostic>'
        print '<location>' + to_string(d.location) + '</location>'
        print '<spelling>' + d.spelling + '</spelling>'
        print '</diagnostic>'
    print_all(tu.cursor)
    print '</top>'


def print_all(node):
    """ Find all references to the type named 'typename'
    """
    print '<' + node.kind.name + '>'
    print '<location>' + to_string(node.location) + '</location>'
    print '<kind>' + node.kind.name + '</kind>'
    print '<name>' + node.spelling + '</name>'
    # Recurse for children of this node
    for child in node.get_children():
        print_all(child)
    print('</' + node.kind.name + '>')


def to_string(location):
    return ('[' + str(location.file) + ' (' +
            str(location.line) + ', ' +
            str(location.column) + ')]')

if __name__ == '__main__':
    main()
