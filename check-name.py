#!/usr/bin/python2
# Boost Software License - Version 1.0 - August 17th, 2003
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

from __future__ import print_function
import sys
import clang.cindex


def main():
    clang.cindex.conf.set_library_path('/home/byon/src/vendor/' +
                                       'llvm/build/Release/lib')
    index = clang.cindex.Index.create()
    tu = index.parse(sys.argv[1], sys.argv[2:])
    print('Translation unit:', tu.spelling)
    for d in tu.diagnostics:
        print('diagnostic:', to_string(d.location), d.spelling)
    print_symbols(tu.cursor)


def print_symbols(node):
    if node.location.file and 'myrrh' not in node.location.file.name:
        print('skipping', to_string(node.location), node.kind.name,
              node.spelling)
        return
    if node.kind.is_declaration():
        if is_variable(node):
            print_variable(node)
        else:
            print(to_string(node.location), node.kind.name, node.spelling)
    # Recurse for children of this node
    for child in node.get_children():
        print_symbols(child)


def is_variable(candidate):
    return (candidate.kind == clang.cindex.CursorKind.FIELD_DECL or
            candidate.kind == clang.cindex.CursorKind.PARM_DECL or
            candidate.kind == clang.cindex.CursorKind.VAR_DECL)


def print_variable(variable):
    type = variable.type.kind
    is_reference = (type == clang.cindex.TypeKind.LVALUEREFERENCE or
                    type == clang.cindex.TypeKind.RVALUEREFERENCE)
    is_pointer = (type == clang.cindex.TypeKind.POINTER or
                  type == clang.cindex.TypeKind.MEMBERPOINTER)
    is_static = variable.storage_class == clang.cindex.StorageClass.STATIC
    print(to_string(variable.location), variable.kind.name,
          variable.spelling,
          'type:', variable.type.spelling,
          'is_static:', is_static,
          'is_pointer:', is_pointer,
          'is_reference:', is_reference)


def to_string(location):
    return ('[' + str(location.file) + ' (' +
            str(location.line) + ', ' +
            str(location.column) + ')]')

if __name__ == '__main__':
    main()
