# Boost Software License - Version 1.0 - August 17th, 2003
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.


import source_file
from behave import given, when, then
from nose.tools import eq_
import check_name
import sys
import StringIO


@given('an empty source file')
def an_empty_source_file(context):
    context.path = source_file.create('')


@when('analysis is made')
def analysis_is_made(context):
    with CatchOutput() as catch:
        context.error_code = check_name.main(create_arguments(context))
        context.error_output = catch.error_output.getvalue()
        context.standard_output = catch.standard_output.getvalue()


@then('analysis should succeed')
def analysis_should_succeed(context):
    eq_(context.error_code, 0)


@then('there should be no output')
def there_should_be_no_output(context):
    assert context.error_output == ''
    assert context.standard_output == ''


def create_arguments(context):
    return ['check_name.py', context.path]


class CatchOutput:
    def __init__(self):
        self.error_output = StringIO.StringIO()
        self.standard_output = StringIO.StringIO()

    def __enter__(self):
        self.stderr = sys.stderr
        self.stdout = sys.stdout
        sys.stderr = self.error_output
        sys.stdout = self.standard_output
        return self

    def __exit__(self, type, value, traceback):
        sys.stderr = self.stderr
        sys.stdout = self.stdout
