# Boost Software License - Version 1.0 - August 17th, 2003
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

from clang.cindex import CursorKind, TypeKind
import pytest
from mock import MagicMock
from identification import is_name_for_smart_pointer, is_pointer


def test_pointer_is_identified_as_pointer(tester):
    assert True == tester.with_type(TypeKind.POINTER).test()


def test_not_pointer_is_not_identified_as_pointer(tester):
    assert False == tester.with_type(TypeKind.INVALID).test()


def test_member_pointer_is_identified_as_pointer(tester):
    assert True == tester.with_type(TypeKind.MEMBERPOINTER).test()


def test_array_pointer_is_identified_as_pointer(tester):
    assert True == tester.with_type(TypeKind.CONSTANTARRAY).test()


def test_variable_whose_type_ends_ptr_is_identified_as_pointer(tester):
    assert True == tester.with_smart_pointer_variable().test()


def test_typedef_smart_pointer_variable_is_identified_as_pointer(tester):
    assert True == tester.with_typedef_smart_pointer_variable().test()


def test_unrelated_class_name_is_not_identified_as_smart_pointer():
    assert False == is_name_for_smart_pointer('NotSmartPointer')


def test_boost_smart_pointer_is_identified_as_smart_pointer():
    assert True == is_name_for_smart_pointer('boost::shared_ptr<int>')


def test_standard_smart_pointer_is_identified_as_smart_pointer():
    assert True == is_name_for_smart_pointer('std::unique_ptr<int>')


def test_smart_pointer_to_smart_pointer_is_identified_as_smart_pointer():
    to_test = 'std::unique_ptr<std::unique_ptr<int>>'
    assert True == is_name_for_smart_pointer(to_test)


def test_class_with_ptr_in_name_is_not_identified_as_smart_pointer():
    assert False == is_name_for_smart_pointer('Claptrap')


def test_vector_of_smart_pointers_is_not_identified_as_smart_pointer():
    to_test = 'std::vector<std::shared_ptr<int>>'
    assert False == is_name_for_smart_pointer(to_test)


@pytest.fixture
def tester():
    return _Tester()


class _Tester():
    def __init__(self):
        self.node = MagicMock()
        self.with_type(TypeKind.INVALID)

    def with_kind(self, kind):
        self.node.kind = kind
        return self

    def with_type(self, type):
        self.node.type = MagicMock(kind=type)
        return self._set_array_types()

    def with_smart_pointer_variable(self):
        self.with_kind(CursorKind.VAR_DECL)
        self.with_type(TypeKind.UNEXPOSED)
        self._set_type_name('std::shared_ptr<int>')
        return self._set_array_types()

    def with_typedef_smart_pointer_variable(self):
        self.with_kind(CursorKind.VAR_DECL)
        self.with_type(TypeKind.TYPEDEF)
        self._set_type_name('std::shared_ptr<int>')
        return self._set_array_types()

    def _set_array_types(self):
        if self.node.type.kind == TypeKind.CONSTANTARRAY:
            return self._set_array_element_type(TypeKind.INT)
        return self._set_array_element_type(TypeKind.INVALID)

    def _set_array_element_type(self, element_kind):
        array_element_type = MagicMock()
        self.node.type.get_array_element_type.return_value = array_element_type
        element_pointee_type = MagicMock(kind=element_kind)
        array_element_type.get_pointee.return_value = element_pointee_type
        return self

    def _set_type_name(self, name):
        canonical_type = MagicMock(spelling=name)
        self.node.type.get_canonical.return_value = canonical_type
        return self

    def test(self):
        return is_pointer(self.node)
