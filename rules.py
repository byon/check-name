# Boost Software License - Version 1.0 - August 17th, 2003
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import clang
import re


def identify_rules(node):
    if is_namespace(node):
        return [CamelCaseRule('namespace')]
    if is_member(node) or is_variable(node):
        return identify_rules_for_variables(node)
    if is_method(node):
        return [HeadlessCamelCaseRule('method')]
    if is_function(node):
        return [HeadlessCamelCaseRule('function')]
    if is_class(node):
        return identify_rules_for_class(node)
    if is_struct(node):
        return [CamelCaseRule('struct')]
    return []


def identify_rules_for_class(node):
    result = [CamelCaseRule('class')]
    if is_interface_class(node):
        result.append(PostFixRule('interface class', 'If'))
    return result


def identify_rules_for_variables(node):
    result = []
    postfix_size = 0
    prefix_size = 0
    if is_member(node):
        result.append(PostFixRule('member variable', 'M'))
        postfix_size = 1
    if is_reference(node):
        prefix_size = 1
    result.append(PreFixRule('reference variable', 'r', is_reference))
    result.append(identify_case_rule(node, prefix_size, postfix_size))
    return result


def identify_case_rule(node, prefix_size, postfix_size):
    if prefix_size > 0:
        return CamelCaseRule('variable', prefix_size, postfix_size)
    return HeadlessCamelCaseRule('variable', postfix_size)


class Rule:
    def __init__(self, type_name, error_description, rule_test=None):
        self.type_name = type_name
        self.errors = [error_description]
        self.rule_test = rule_test

    def test(self, node):
        return self.rule_test(node.spelling)


class ConditionalRule(Rule):
    def __init__(self, type_name, original_description, inverted_description,
                 rule_test, condition=None):
        Rule.__init__(self, type_name, original_description, rule_test)
        self.original_description = original_description
        self.inverted_description = inverted_description
        self.condition = condition

    def test(self, node):
        result = self.rule_test(node.spelling)
        if self._should_invert_result(node):
            self.errors = [self.inverted_description]
            return not result
        return result

    def _should_invert_result(self, node):
        return self.condition and not self.condition(node)


class PartialCheckRule(Rule):
    def __init__(self, type_name, error_description, rule_test,
                 prefix_size, postfix_size):
        Rule.__init__(self, type_name, error_description, rule_test)
        self.prefix_size = prefix_size
        self.postfix_size = postfix_size

    def test(self, node):
        end = -self.postfix_size if self.postfix_size > 0 else None
        part_to_check = node.spelling[self.prefix_size:end]
        return self.rule_test(part_to_check)


class CamelCaseRule(PartialCheckRule):
    def __init__(self, identifier, prefix_size=0, postfix_size=0):
        PartialCheckRule.__init__(self, identifier, 'is not in CamelCase',
                                  is_camel_case, prefix_size, postfix_size)


class HeadlessCamelCaseRule(PartialCheckRule):
    def __init__(self, identifier, postfix_size=0):
        description = 'is not in headlessCamelCase'
        PartialCheckRule.__init__(self, identifier, description,
                                  is_headless_camel_case, 0, postfix_size)


class PostFixRule(ConditionalRule):
    def __init__(self, identifier, postfix, condition=None):
        self.postfix = postfix
        ConditionalRule.__init__(self, identifier,
                                 'does not have postfix "' + postfix + '"',
                                 'has redundant postfix "' + postfix + '"',
                                 lambda n: n.endswith(self.postfix),
                                 condition)


class PreFixRule(ConditionalRule):
    def __init__(self, identifier, prefix, condition=None):
        self.prefix = prefix
        ConditionalRule.__init__(self, identifier,
                                 'does not have prefix "' + prefix + '"',
                                 'has redundant prefix "' + prefix + '"',
                                 lambda n: n.startswith(self.prefix),
                                 condition)


def is_camel_case(name):
    return True if re.match('^([A-Z][a-z]+\d*)+$', name) else False


def is_headless_camel_case(name):
    expression = '^[a-z]+\d*([A-Z][a-z]+\d*)*$'
    return True if re.match(expression, name) else False


def is_class(node):
    return clang.cindex.CursorKind.CLASS_DECL == node.kind


def is_interface_class(node):
    for method in [c for c in node.get_children() if is_method(c)]:
        if method.is_pure_virtual_method():
            return True
    return False


def is_function(node):
    return clang.cindex.CursorKind.FUNCTION_DECL == node.kind


def is_member(node):
    return clang.cindex.CursorKind.FIELD_DECL == node.kind


def is_method(node):
    return clang.cindex.CursorKind.CXX_METHOD == node.kind


def is_namespace(node):
    return clang.cindex.CursorKind.NAMESPACE == node.kind


def is_struct(node):
    return clang.cindex.CursorKind.STRUCT_DECL == node.kind


def is_variable(node):
    return clang.cindex.CursorKind.VAR_DECL == node.kind


def is_reference(node):
    return clang.cindex.TypeKind.LVALUEREFERENCE == node.type.kind
