# Boost Software License - Version 1.0 - August 17th, 2003
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import clang
import re


def identify_rules(node):
    if is_namespace(node):
        return [CamelCaseRule('namespace')]
    if is_variable(node):
        return [HeadlessCamelCaseRule('variable')]
    if is_method(node):
        return [HeadlessCamelCaseRule('method')]
    if is_function(node):
        return [HeadlessCamelCaseRule('function')]
    if is_class(node):
        return identify_rules_for_class(node)
    if is_struct(node):
        return [CamelCaseRule('struct')]
    return []


def identify_rules_for_class(node):
    result = [CamelCaseRule('class')]
    if is_interface_class(node):
        result.append(PostFixRule('interface class', 'If'))
    return result


class Rule:
    def __init__(self, type_name, error_description, rule_test=None):
        self.type_name = type_name
        self.error_description = error_description
        self.rule_test = rule_test

    def test(self, node):
        return self.rule_test(node.spelling)


class CamelCaseRule(Rule):
    def __init__(self, identifier):
        Rule.__init__(self, identifier, 'is not in CamelCase', is_camel_case)


class HeadlessCamelCaseRule(Rule):
    def __init__(self, identifier):
        Rule.__init__(self, identifier, 'is not in headlessCamelCase',
                      is_headless_camel_case)


class PostFixRule(Rule):
    def __init__(self, identifier, postfix):
        Rule.__init__(self, identifier,
                      'does not have postfix "' + postfix + '"')
        self.postfix = postfix

    def test(self, node):
        return node.spelling.endswith(self.postfix)


def is_camel_case(name):
    return True if re.match('^([A-Z][a-z]+\d*)+$', name) else False


def is_headless_camel_case(name):
    return True if re.match('^[a-z]+\d*([A-Z][a-z]+\d*)*$', name) else False


def is_class(node):
    return clang.cindex.CursorKind.CLASS_DECL == node.kind


def is_interface_class(node):
    for method in [c for c in node.get_children() if is_method(c)]:
        if method.is_pure_virtual_method():
            return True
    return False


def is_function(node):
    return clang.cindex.CursorKind.FUNCTION_DECL == node.kind


def is_method(node):
    return clang.cindex.CursorKind.CXX_METHOD == node.kind


def is_namespace(node):
    return clang.cindex.CursorKind.NAMESPACE == node.kind


def is_struct(node):
    return clang.cindex.CursorKind.STRUCT_DECL == node.kind


def is_variable(node):
    return clang.cindex.CursorKind.VAR_DECL == node.kind
